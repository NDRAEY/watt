// –º–∏–Ω–∏ gil ü•¨
use std::sync::{OnceLock};
use parking_lot::ReentrantMutex;

// —Å–∞–º gil
static GIL: OnceLock<ReentrantMutex<()>> = OnceLock::new();

// –µ–≥–æ –≥–µ—Ç—Ç–µ—Ä
pub fn get_gil() -> &'static ReentrantMutex<()> {
    GIL.get_or_init(|| ReentrantMutex::new(()))
}

// –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å gil'–æ–º
pub fn with_gil<F, R>(f: F) -> R
where F: FnOnce() -> R {
    let _lock = get_gil().lock();
    let _result = f();
    drop(_lock);
    _result
}